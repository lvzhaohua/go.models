// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package stock_interface

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DefaultClient is the client API for Default service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DefaultClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	ListOperation(ctx context.Context, in *ListOperationRequest, opts ...grpc.CallOption) (*ListOperationReply, error)
	UpsetOperation(ctx context.Context, in *UpsetOperationRequest, opts ...grpc.CallOption) (*UpsetOperationReply, error)
	DeleteOperation(ctx context.Context, in *DeleteOperationRequest, opts ...grpc.CallOption) (*DeleteOperationReply, error)
}

type defaultClient struct {
	cc grpc.ClientConnInterface
}

func NewDefaultClient(cc grpc.ClientConnInterface) DefaultClient {
	return &defaultClient{cc}
}

func (c *defaultClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/stock.Default/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultClient) ListOperation(ctx context.Context, in *ListOperationRequest, opts ...grpc.CallOption) (*ListOperationReply, error) {
	out := new(ListOperationReply)
	err := c.cc.Invoke(ctx, "/stock.Default/ListOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultClient) UpsetOperation(ctx context.Context, in *UpsetOperationRequest, opts ...grpc.CallOption) (*UpsetOperationReply, error) {
	out := new(UpsetOperationReply)
	err := c.cc.Invoke(ctx, "/stock.Default/UpsetOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultClient) DeleteOperation(ctx context.Context, in *DeleteOperationRequest, opts ...grpc.CallOption) (*DeleteOperationReply, error) {
	out := new(DeleteOperationReply)
	err := c.cc.Invoke(ctx, "/stock.Default/DeleteOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DefaultServer is the server API for Default service.
// All implementations must embed UnimplementedDefaultServer
// for forward compatibility
type DefaultServer interface {
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	ListOperation(context.Context, *ListOperationRequest) (*ListOperationReply, error)
	UpsetOperation(context.Context, *UpsetOperationRequest) (*UpsetOperationReply, error)
	DeleteOperation(context.Context, *DeleteOperationRequest) (*DeleteOperationReply, error)
	mustEmbedUnimplementedDefaultServer()
}

// UnimplementedDefaultServer must be embedded to have forward compatible implementations.
type UnimplementedDefaultServer struct {
}

func (UnimplementedDefaultServer) Login(context.Context, *LoginRequest) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedDefaultServer) ListOperation(context.Context, *ListOperationRequest) (*ListOperationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperation not implemented")
}
func (UnimplementedDefaultServer) UpsetOperation(context.Context, *UpsetOperationRequest) (*UpsetOperationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsetOperation not implemented")
}
func (UnimplementedDefaultServer) DeleteOperation(context.Context, *DeleteOperationRequest) (*DeleteOperationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOperation not implemented")
}
func (UnimplementedDefaultServer) mustEmbedUnimplementedDefaultServer() {}

// UnsafeDefaultServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DefaultServer will
// result in compilation errors.
type UnsafeDefaultServer interface {
	mustEmbedUnimplementedDefaultServer()
}

func RegisterDefaultServer(s grpc.ServiceRegistrar, srv DefaultServer) {
	s.RegisterService(&_Default_serviceDesc, srv)
}

func _Default_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock.Default/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Default_ListOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultServer).ListOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock.Default/ListOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultServer).ListOperation(ctx, req.(*ListOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Default_UpsetOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsetOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultServer).UpsetOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock.Default/UpsetOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultServer).UpsetOperation(ctx, req.(*UpsetOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Default_DeleteOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultServer).DeleteOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock.Default/DeleteOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultServer).DeleteOperation(ctx, req.(*DeleteOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Default_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stock.Default",
	HandlerType: (*DefaultServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Default_Login_Handler,
		},
		{
			MethodName: "ListOperation",
			Handler:    _Default_ListOperation_Handler,
		},
		{
			MethodName: "UpsetOperation",
			Handler:    _Default_UpsetOperation_Handler,
		},
		{
			MethodName: "DeleteOperation",
			Handler:    _Default_DeleteOperation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stock/service.proto",
}
