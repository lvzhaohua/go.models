// Code generated by protoc-gen-go-rpcx. DO NOT EDIT.

package tripurx_shopping_interface

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DefaultRPCXServer is the server API for DefaultRPCX service.
// All implementations should embed UnimplementedDefaultRPCXServer
// for forward compatibility
type DefaultRPCXServer interface {
	// GetSpu 获取Spu
	// 临时路径 tripurx_shopping.Default/GetSpu
	GetSpu(context.Context, *GetSpuRequest, *GetSpuReply) error
	// UpdateSpu 更新Spu
	// 临时路径 tripurx_shopping.Default/UpdateSpu
	UpdateSpu(context.Context, *UpdateSpuRequest, *UpdateSpuReply) error
}

// UnimplementedDefaultRPCXServer should be embedded to have forward compatible implementations.
type UnimplementedDefaultRPCXServer struct {
}

func (UnimplementedDefaultRPCXServer) GetSpu(context.Context, *GetSpuRequest, *GetSpuReply) error {
	return status.Errorf(codes.Unimplemented, "method GetSpu not implemented")
}
func (UnimplementedDefaultRPCXServer) UpdateSpu(context.Context, *UpdateSpuRequest, *UpdateSpuReply) error {
	return status.Errorf(codes.Unimplemented, "method UpdateSpu not implemented")
}

func RegisterDefaultRPCXServer(s grpc.ServiceRegistrar, srv DefaultRPCXServer) {
	s.RegisterService(&DefaultRPCX_ServiceDesc, srv)
}

// DefaultRPCX_ServiceDesc is the grpc.ServiceDesc for DefaultRPCX service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DefaultRPCX_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tripurx_shopping.Default",
	HandlerType: (*DefaultRPCXServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSpu",
		},
		{
			MethodName: "UpdateSpu",
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tripurx_shopping/service.proto",
}
